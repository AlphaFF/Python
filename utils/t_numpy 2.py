#/usr/bin/env python3
#coding:utf-8

import numpy as np
import math

# # linspace 用来生成一组等间隔的数据
# pi = 3.1415926
# a = np.linspace(0,2*pi,21)
# # print(a)
# %precision 3 精度 .3f

## axis=0是竖直方向,axis=1是水平方向
# A.sun(axis=0)

## python里的广播作用可以把矩阵自动扩展成想要的形式
# (m,n) +-*/ (1,n)=>(m,n)  /// (m,1)=>(m,n)

## 创建数组是最好指定shape,让其具有行向量或列向量行为
# np.random.randn(5,1) 
## 如果没有指定最好也要重新设置一下
# np.shape = 5,1

## 切片在内存中使用的是引用机制
# 这样做的好处在于，对于很大的数组，不用大量复制多余的值，节约了空间。
# 缺点在于，可能出现改变一个值改变另一个值的情况。
# 一个解决方法是使用copy()方法产生一个复制，这个复制会申请新的内存

## 花式索引,
# 切片只能支持连续或者等间隔的切片操作，要想实现任意位置的操作，需要使用花式索引 
# 花式索引需要指定索引位置
# 一维花式索引  indices = [1, 2, -3]  a[indices]
# 二维花式索引  a[(0,1,2,3,4), (1,2,3,4,5)]
# 三维花式索引  a[:,:,[2, -1]]

## where语句
# where(array) where函数会返回所有非零元素的索引,返回值是一个元组, (array([1, 3], dtype=int64),)
# 使用元组是由于 where 可以对多维数组使用，此时返回值就是多维的,返回结果是一个二维的元组，每一维代表这一维的索引值

## 数组方法
# axis = 0,是第一维,axis=1,是第二维
# sum() 求和
# prod() 求积
# max()/min() 最大值最小值
# argmin()/argmax() 最大值最小值位置
# mean() 均值  average()还支持加权平均
# std() 标准差
# var() 方差
# clip() 将数值限制在某个范围,a.clip(3,5)即会将a里的小于3的变成3，大于5的变成5
# ptp() 计算最大值和最小值之差
# round() 近似,默认到整数

## 数组排序
# sort(a)函数 sort返回的结果是从小到大排序的,不会改变数组的值,但是a.sort()方法会改变数组的值
# argsort() 和 argsort()方法 返回从小到大的排列在数组中的索引位置,都不会改变数组的值
# 二维数组sort方法默认沿着最后一维开始排序
# searchsorted函数 接受两个参数，其中，第一个必需是已排序的数组,返回的是第二个数组中插入到第一个数组的位置
# sorted_array = linspace(0,1,5)
# values = array([.1,.8,.3,.12,.5,.25])
# searchsorted(sorted_array, values)
# array([1, 4, 2, 1, 2, 1], dtype=int64)
# searchsorted 返回的值相当于保持第一个数组的排序性质不变，将第二个数组中的值插入第一个数组中的位置

# 数组的形状
# a.shape = 2,3
# a.reshape(2,3) 与上面的对应,但它不会修改原来数组的值,而是返回一个新的数组
# shape 和 reshape 方法不能改变数组中元素的总数
# a[newaxis, :] a[:,newaxis]根据插入位置的不同，可以返回不同形状的数组 (使用 newaxis 增加数组维数)
# squeeze() 方法去除多余的轴,squeeze 返回一个将所有长度为1的维度去除的新数组
# a.transpose() a.T 转置数组
# 转置只是交换了轴的位置。
# 另一方面，转置返回的是对原数组的另一种view，所以改变转置会改变原来数组的值














